http_interactions:
- request:
    method: get
    uri: https://www.pangaea.de/advanced/search.php?count=10&offset=0&q=florisphaera
    body:
      encoding: ''
      string: ''
    headers:
      User-Agent: libcurl/7.54.0 r-curl/4.3 crul/0.9.0
      Accept-Encoding: gzip, deflate
      Accept: application/json, text/xml, application/xml, */*
  response:
    status:
      status_code: '200'
      message: OK
      explanation: Request fulfilled, document follows
    headers:
      cache-control: private, max-age=10800, pre-check=10800
      connection: keep-alive
      content-encoding: gzip
      content-type: application/json; charset=UTF-8
      date: Wed, 22 Jan 2020 17:18:00 GMT
      last-modified: Fri, 15 Apr 2016 11:55:50 GMT
      server: PANGAEA/2.0
      status: HTTP/1.1 200 OK
      strict-transport-security: max-age=31536000
      transfer-encoding: chunked
      vary:
      - Accept-Encoding
      - Cookie, X-PanLoginID, Authorization
      x-content-type-options: nosniff
      x-frame-options: SAMEORIGIN
      x-ua-compatible: IE=Edge
    body:
      encoding: ASCII-8BIT
      file: no
      string: eyJyZXN1bHRzIjpbeyJVUkkiOiJkb2k6MTAuMTU5NFwvUEFOR0FFQS44MDU2OTYiLCJzY29yZSI6NTUuNTM1NDEsImh0bWwiOiI8bGk+PGRpdiBjbGFzcz1cImNpdGF0aW9uXCI+PGEgaHJlZj1cImh0dHBzOlwvXC9kb2kucGFuZ2FlYS5kZVwvMTAuMTU5NFwvUEFOR0FFQS44MDU2OTZcIiB0YXJnZXQ9XCJfc2VsZlwiIGNsYXNzPVwiZGF0YXNldC1saW5rXCI+PHN0cm9uZz5HcmVsYXVkLCBNOyBNYXJpbm8sIEc7IFppdmVyaSwgUCBldCBhbC4gKDIwMTIpOjxcL3N0cm9uZz4gRGlzdHJpYnV0aW9uIG9mIEZsb3Jpc3BoYWVyYSBwcm9mdW5kYSBhbmQgSGVsaWNvc3BoYWVyYSBjYXJ0ZXJpIGluIGRvd24gY29yZSBhbmQgc3VyZmFjZSBzZWRpbWVudHM8XC9hPjxcL2Rpdj48dGFibGUgY2xhc3M9XCJyZXN1bHRcIiBzdW1tYXJ5PVwiRGF0YXNldCByZWZlcmVuY2UgYW5kIHNpemVcIiBjZWxsc3BhY2luZz1cIjBcIiBjZWxscGFkZGluZz1cIjBcIj48dHI+PHRkIGNsYXNzPVwidGl0bGVcIj5TdXBwbGVtZW50IHRvOjxcL3RkPjx0ZCBjbGFzcz1cImNvbnRlbnRcIj48c3Ryb25nPkdyZWxhdWQsIE07IE1hcmlubywgRzsgWml2ZXJpLCBQIGV0IGFsLiAoMjAxMik6PFwvc3Ryb25nPiBBYnJ1cHQgc2hvYWxpbmcgb2YgdGhlIG51dHJpY2xpbmUgaW4gcmVzcG9uc2UgdG8gbWFzc2l2ZSBmcmVzaHdhdGVyIGZsb29kaW5nIGF0IHRoZSBvbnNldCBvZiB0aGUgbGFzdCBpbnRlcmdsYWNpYWwgc2Fwcm9wZWwgZXZlbnQuIDxlbT5QYWxlb2NlYW5vZ3JhcGh5PFwvZW0+PFwvdGQ+PFwvdHI+PHRyPjx0ZCBjbGFzcz1cInRpdGxlXCI+U2l6ZTo8XC90ZD48dGQgY2xhc3M9XCJjb250ZW50XCI+MiBkYXRhc2V0czxcL3RkPjxcL3RyPjxcL3RhYmxlPjxkaXYgY2xhc3M9XCJkYXRhc2V0aWRcIj48YSBocmVmPVwiaHR0cHM6XC9cL2RvaS5wYW5nYWVhLmRlXC8xMC4xNTk0XC9QQU5HQUVBLjgwNTY5NlwiIHRhcmdldD1cIl9zZWxmXCIgY2xhc3M9XCJkYXRhc2V0LWxpbmsgZG9pLWxpbmtcIj5odHRwczpcL1wvZG9pLm9yZ1wvMTAuMTU5NFwvUEFOR0FFQS44MDU2OTY8XC9hPiAtIDxzcGFuIHRpdGxlPVwiVGhlIHNjb3JlIGlzIGEgbWVhc3VyZW1lbnQgb2YgcmVsZXZhbmN5IChzZWUgVEYtSURGIGFsZ29yaXRobSkuIFRoZSB2YWx1ZSBpcyBub3QgYWJzb2x1dGUgYW5kIG9ubHkgc3VpdGFibGUgdG8gY29tcGFyZSBoaXRzIGZyb20gdGhlIHNhbWUgcmVzdWx0IHNldC5cIj5TY29yZTogNTUuNTQ8XC9zcGFuPjxcL2Rpdj48XC9saT4ifSx7IlVSSSI6ImRvaToxMC4xNTk0XC9QQU5HQUVBLjg5NTY3OSIsInNjb3JlIjozOC4zOTU3ODIsImh0bWwiOiI8bGk+PGRpdiBjbGFzcz1cImNpdGF0aW9uXCI+PGEgaHJlZj1cImh0dHBzOlwvXC9kb2kucGFuZ2FlYS5kZVwvMTAuMTU5NFwvUEFOR0FFQS44OTU2NzlcIiB0YXJnZXQ9XCJfc2VsZlwiIGNsYXNzPVwiZGF0YXNldC1saW5rXCI+PHN0cm9uZz5BdXPDrW4sIEI7IEZsb3JlcywgSkE7IFNpZXJybywgRkogZXQgYWwuICgyMDE4KTo8XC9zdHJvbmc+IE5hbm5vZm9zc2lsLCBhbGtlbm9uZSBhbmQgb3h5Z2VuIGlzb3RvcGljIGRhdGEgZnJvbSBzZWRpbWVudCBjb3JlIEhFUi1HQy1UMTxcL2E+PFwvZGl2Pjx0YWJsZSBjbGFzcz1cInJlc3VsdFwiIHN1bW1hcnk9XCJEYXRhc2V0IHJlZmVyZW5jZSBhbmQgc2l6ZVwiIGNlbGxzcGFjaW5nPVwiMFwiIGNlbGxwYWRkaW5nPVwiMFwiPjx0cj48dGQgY2xhc3M9XCJ0aXRsZVwiPlN1cHBsZW1lbnQgdG86PFwvdGQ+PHRkIGNsYXNzPVwiY29udGVudFwiPjxzdHJvbmc+QXVzw61uLCBCOyBGbG9yZXMsIEpBOyBTaWVycm8sIEZKIGV0IGFsLiAoMjAxNSk6PFwvc3Ryb25nPiBBdG1vc3BoZXJpYyBwYXR0ZXJucyBkcml2aW5nIEhvbG9jZW5lIHByb2R1Y3Rpdml0eSBpbiB0aGUgQWxib3JhbiBTZWEgKFdlc3Rlcm4gTWVkaXRlcnJhbmVhbik6IEEgbXVsdGlwcm94eSBhcHByb2FjaC4gPGVtPlRoZSBIb2xvY2VuZTxcL2VtPjxcL3RkPjxcL3RyPjx0cj48dGQgY2xhc3M9XCJ0aXRsZVwiPlNpemU6PFwvdGQ+PHRkIGNsYXNzPVwiY29udGVudFwiPjMgZGF0YXNldHM8XC90ZD48XC90cj48XC90YWJsZT48ZGl2IGNsYXNzPVwiZGF0YXNldGlkXCI+PGEgaHJlZj1cImh0dHBzOlwvXC9kb2kucGFuZ2FlYS5kZVwvMTAuMTU5NFwvUEFOR0FFQS44OTU2NzlcIiB0YXJnZXQ9XCJfc2VsZlwiIGNsYXNzPVwiZGF0YXNldC1saW5rIGRvaS1saW5rXCI+aHR0cHM6XC9cL2RvaS5vcmdcLzEwLjE1OTRcL1BBTkdBRUEuODk1Njc5PFwvYT4gLSA8c3BhbiB0aXRsZT1cIlRoZSBzY29yZSBpcyBhIG1lYXN1cmVtZW50IG9mIHJlbGV2YW5jeSAoc2VlIFRGLUlERiBhbGdvcml0aG0pLiBUaGUgdmFsdWUgaXMgbm90IGFic29sdXRlIGFuZCBvbmx5IHN1aXRhYmxlIHRvIGNvbXBhcmUgaGl0cyBmcm9tIHRoZSBzYW1lIHJlc3VsdCBzZXQuXCI+U2NvcmU6IDM4LjQ8XC9zcGFuPjxcL2Rpdj48XC9saT4ifSx7IlVSSSI6ImRvaToxMC4xNTk0XC9QQU5HQUVBLjc4Nzk1NyIsInNjb3JlIjozMi41NzAwMDcsImh0bWwiOiI8bGk+PGRpdiBjbGFzcz1cImNpdGF0aW9uXCI+PGEgaHJlZj1cImh0dHBzOlwvXC9kb2kucGFuZ2FlYS5kZVwvMTAuMTU5NFwvUEFOR0FFQS43ODc5NTdcIiB0YXJnZXQ9XCJfc2VsZlwiIGNsYXNzPVwiZGF0YXNldC1saW5rXCI+PHN0cm9uZz5Sw7xobGVtYW5uLCBDOyBEaWVrbWFubiwgQjsgTXVsaXR6YSwgUyBldCBhbC4gKDIwMDEpOjxcL3N0cm9uZz4gU3RhYmxlIGlzb3RvcGVzIG9mIGZvcmFtaW5pZmVycywgbWluZXJhbG9neSBhbmQgYWdlcyBvZiBzZWRpbWVudCBjb3JlIEdlb0IxNTIzLTE8XC9hPjxcL2Rpdj48dGFibGUgY2xhc3M9XCJyZXN1bHRcIiBzdW1tYXJ5PVwiRGF0YXNldCByZWZlcmVuY2UgYW5kIHNpemVcIiBjZWxsc3BhY2luZz1cIjBcIiBjZWxscGFkZGluZz1cIjBcIj48dHI+PHRkIGNsYXNzPVwidGl0bGVcIj5TdXBwbGVtZW50IHRvOjxcL3RkPjx0ZCBjbGFzcz1cImNvbnRlbnRcIj48c3Ryb25nPlLDvGhsZW1hbm4sIEM7IERpZWttYW5uLCBCOyBNdWxpdHphLCBTIGV0IGFsLiAoMjAwMSk6PFwvc3Ryb25nPiBMYXRlIFF1YXRlcm5hcnkgY2hhbmdlcyBvZiB3ZXN0ZXJuIGVxdWF0b3JpYWwgQXRsYW50aWMgc3VyZmFjZSBjaXJjdWxhdGlvbiBhbmQgQW1hem9uIGxvd2xhbmQgY2xpbWF0ZSByZWNvcmRlZCBpbiBDZWFyYSBSaXNlIGRlZXAtc2VhIHNlZGltZW50cy4gPGVtPlBhbGVvY2Vhbm9ncmFwaHk8XC9lbT48XC90ZD48XC90cj48dHI+PHRkIGNsYXNzPVwidGl0bGVcIj5TaXplOjxcL3RkPjx0ZCBjbGFzcz1cImNvbnRlbnRcIj40IGRhdGFzZXRzPFwvdGQ+PFwvdHI+PFwvdGFibGU+PGRpdiBjbGFzcz1cImRhdGFzZXRpZFwiPjxhIGhyZWY9XCJodHRwczpcL1wvZG9pLnBhbmdhZWEuZGVcLzEwLjE1OTRcL1BBTkdBRUEuNzg3OTU3XCIgdGFyZ2V0PVwiX3NlbGZcIiBjbGFzcz1cImRhdGFzZXQtbGluayBkb2ktbGlua1wiPmh0dHBzOlwvXC9kb2kub3JnXC8xMC4xNTk0XC9QQU5HQUVBLjc4Nzk1NzxcL2E+IC0gPHNwYW4gdGl0bGU9XCJUaGUgc2NvcmUgaXMgYSBtZWFzdXJlbWVudCBvZiByZWxldmFuY3kgKHNlZSBURi1JREYgYWxnb3JpdGhtKS4gVGhlIHZhbHVlIGlzIG5vdCBhYnNvbHV0ZSBhbmQgb25seSBzdWl0YWJsZSB0byBjb21wYXJlIGhpdHMgZnJvbSB0aGUgc2FtZSByZXN1bHQgc2V0LlwiPlNjb3JlOiAzMi41NzxcL3NwYW4+PFwvZGl2PjxcL2xpPiJ9LHsiVVJJIjoiZG9pOjEwLjE1OTRcL1BBTkdBRUEuNjc2OTY1Iiwic2NvcmUiOjMwLjA2MjA3LCJodG1sIjoiPGxpPjxkaXYgY2xhc3M9XCJjaXRhdGlvblwiPjxhIGhyZWY9XCJodHRwczpcL1wvZG9pLnBhbmdhZWEuZGVcLzEwLjE1OTRcL1BBTkdBRUEuNjc2OTY1XCIgdGFyZ2V0PVwiX3NlbGZcIiBjbGFzcz1cImRhdGFzZXQtbGlua1wiPjxzdHJvbmc+U2hhY2tsZXRvbiwgTko7IEdpYmJzLCBTSjsgWW91bmcsIEogKDIwMDQpOjxcL3N0cm9uZz4gTmFubm9mb3NzaWwgYXNzZW1ibGFnZXMgb2YgbWlkLVBsaW9jZW5lIHNlZGltZW50cyBmcm9tIHRoZSBlcXVhdG9yaWFsIEF0bGFudGljPFwvYT48XC9kaXY+PHRhYmxlIGNsYXNzPVwicmVzdWx0XCIgc3VtbWFyeT1cIkRhdGFzZXQgcmVmZXJlbmNlIGFuZCBzaXplXCIgY2VsbHNwYWNpbmc9XCIwXCIgY2VsbHBhZGRpbmc9XCIwXCI+PHRyPjx0ZCBjbGFzcz1cInRpdGxlXCI+U3VwcGxlbWVudCB0bzo8XC90ZD48dGQgY2xhc3M9XCJjb250ZW50XCI+PHN0cm9uZz5HaWJicywgU0o7IFNoYWNrbGV0b24sIE5KOyBZb3VuZywgSiAoMjAwNCk6PFwvc3Ryb25nPiBPcmJpdGFsbHkgZm9yY2VkIGNsaW1hdGUgc2lnbmFscyBpbiBtaWQtUGxpb2NlbmUgbmFubm9mb3NzaWwgYXNzZW1ibGFnZXMuIDxlbT5NYXJpbmUgTWljcm9wYWxlb250b2xvZ3k8XC9lbT48XC90ZD48XC90cj48dHI+PHRkIGNsYXNzPVwidGl0bGVcIj5TaXplOjxcL3RkPjx0ZCBjbGFzcz1cImNvbnRlbnRcIj40IGRhdGFzZXRzPFwvdGQ+PFwvdHI+PFwvdGFibGU+PGRpdiBjbGFzcz1cImRhdGFzZXRpZFwiPjxhIGhyZWY9XCJodHRwczpcL1wvZG9pLnBhbmdhZWEuZGVcLzEwLjE1OTRcL1BBTkdBRUEuNjc2OTY1XCIgdGFyZ2V0PVwiX3NlbGZcIiBjbGFzcz1cImRhdGFzZXQtbGluayBkb2ktbGlua1wiPmh0dHBzOlwvXC9kb2kub3JnXC8xMC4xNTk0XC9QQU5HQUVBLjY3Njk2NTxcL2E+IC0gPHNwYW4gdGl0bGU9XCJUaGUgc2NvcmUgaXMgYSBtZWFzdXJlbWVudCBvZiByZWxldmFuY3kgKHNlZSBURi1JREYgYWxnb3JpdGhtKS4gVGhlIHZhbHVlIGlzIG5vdCBhYnNvbHV0ZSBhbmQgb25seSBzdWl0YWJsZSB0byBjb21wYXJlIGhpdHMgZnJvbSB0aGUgc2FtZSByZXN1bHQgc2V0LlwiPlNjb3JlOiAzMC4wNjxcL3NwYW4+PFwvZGl2PjxcL2xpPiJ9LHsiVVJJIjoiZG9pOjEwLjE1OTRcL1BBTkdBRUEuODMyMTI3Iiwic2NvcmUiOjI5LjgzNTIwNywiaHRtbCI6IjxsaT48ZGl2IGNsYXNzPVwiY2l0YXRpb25cIj48YSBocmVmPVwiaHR0cHM6XC9cL2RvaS5wYW5nYWVhLmRlXC8xMC4xNTk0XC9QQU5HQUVBLjgzMjEyN1wiIHRhcmdldD1cIl9zZWxmXCIgY2xhc3M9XCJkYXRhc2V0LWxpbmtcIj48c3Ryb25nPkluY2FyYm9uYSwgQTsgRGkgU3RlZmFubywgRTsgUGF0dGksIEIgZXQgYWwuICgyMDA4KTo8XC9zdHJvbmc+IEhvbG9jZW5lIG1pbGxlbmlhbC1zY2FsZSBwcm9kdWN0aXZpdHkgcmVjb3JkIGluIHRoZSBNZWRpdGVycmFuZWFuIFNlYTxcL2E+PFwvZGl2Pjx0YWJsZSBjbGFzcz1cInJlc3VsdFwiIHN1bW1hcnk9XCJEYXRhc2V0IHJlZmVyZW5jZSBhbmQgc2l6ZVwiIGNlbGxzcGFjaW5nPVwiMFwiIGNlbGxwYWRkaW5nPVwiMFwiPjx0cj48dGQgY2xhc3M9XCJ0aXRsZVwiPlN1cHBsZW1lbnQgdG86PFwvdGQ+PHRkIGNsYXNzPVwiY29udGVudFwiPjxzdHJvbmc+SW5jYXJib25hLCBBOyBEaSBTdGVmYW5vLCBFOyBQYXR0aSwgQiBldCBhbC4gKDIwMDgpOjxcL3N0cm9uZz4gSG9sb2NlbmUgbWlsbGVubmlhbC1zY2FsZSBwcm9kdWN0aXZpdHkgdmFyaWF0aW9ucyBpbiB0aGUgU2ljaWx5IENoYW5uZWwgKE1lZGl0ZXJyYW5lYW4gU2VhKS4gPGVtPlBhbGVvY2Vhbm9ncmFwaHk8XC9lbT48XC90ZD48XC90cj48dHI+PHRkIGNsYXNzPVwidGl0bGVcIj5TaXplOjxcL3RkPjx0ZCBjbGFzcz1cImNvbnRlbnRcIj4zIGRhdGFzZXRzPFwvdGQ+PFwvdHI+PFwvdGFibGU+PGRpdiBjbGFzcz1cImRhdGFzZXRpZFwiPjxhIGhyZWY9XCJodHRwczpcL1wvZG9pLnBhbmdhZWEuZGVcLzEwLjE1OTRcL1BBTkdBRUEuODMyMTI3XCIgdGFyZ2V0PVwiX3NlbGZcIiBjbGFzcz1cImRhdGFzZXQtbGluayBkb2ktbGlua1wiPmh0dHBzOlwvXC9kb2kub3JnXC8xMC4xNTk0XC9QQU5HQUVBLjgzMjEyNzxcL2E+IC0gPHNwYW4gdGl0bGU9XCJUaGUgc2NvcmUgaXMgYSBtZWFzdXJlbWVudCBvZiByZWxldmFuY3kgKHNlZSBURi1JREYgYWxnb3JpdGhtKS4gVGhlIHZhbHVlIGlzIG5vdCBhYnNvbHV0ZSBhbmQgb25seSBzdWl0YWJsZSB0byBjb21wYXJlIGhpdHMgZnJvbSB0aGUgc2FtZSByZXN1bHQgc2V0LlwiPlNjb3JlOiAyOS44NDxcL3NwYW4+PFwvZGl2PjxcL2xpPiJ9LHsiVVJJIjoiZG9pOjEwLjE1OTRcL1BBTkdBRUEuODExMTg5Iiwic2NvcmUiOjI5Ljc1MjQxOSwiaHRtbCI6IjxsaT48ZGl2IGNsYXNzPVwiY2l0YXRpb25cIj48YSBocmVmPVwiaHR0cHM6XC9cL2RvaS5wYW5nYWVhLmRlXC8xMC4xNTk0XC9QQU5HQUVBLjgxMTE4OVwiIHRhcmdldD1cIl9zZWxmXCIgY2xhc3M9XCJkYXRhc2V0LWxpbmtcIj48c3Ryb25nPkNoaXlvbm9idSwgUzsgTW9yaSwgWTsgT2RhLCBNICgyMDEyKTo8XC9zdHJvbmc+IENhbGNhcmVvdXMgbmFubm9mb3NzaWxzIGFuZCBwbGFua3RpYyBmb3JhbWluaWZlcmFsIGFzc2VtYmxhZ2VzIG9mIE9EUCBIb2xlIDE5OC0xMjEwQTxcL2E+PFwvZGl2Pjx0YWJsZSBjbGFzcz1cInJlc3VsdFwiIHN1bW1hcnk9XCJEYXRhc2V0IHJlZmVyZW5jZSBhbmQgc2l6ZVwiIGNlbGxzcGFjaW5nPVwiMFwiIGNlbGxwYWRkaW5nPVwiMFwiPjx0cj48dGQgY2xhc3M9XCJ0aXRsZVwiPlN1cHBsZW1lbnQgdG86PFwvdGQ+PHRkIGNsYXNzPVwiY29udGVudFwiPjxzdHJvbmc+Q2hpeW9ub2J1LCBTOyBNb3JpLCBZOyBPZGEsIE0gKDIwMTIpOjxcL3N0cm9uZz4gUmVjb25zdHJ1Y3Rpb24gb2YgcGFsZW9jZWFub2dyYXBoaWMgY29uZGl0aW9ucyBpbiB0aGUgbm9ydGh3ZXN0ZXJuIFBhY2lmaWMgT2NlYW4gb3ZlciB0aGUgbGFzdCA1MDBreXIgYmFzZWQgb24gY2FsY2FyZW91cyBuYW5ub2Zvc3NpbCBhbmQgcGxhbmt0aWMgZm9yYW1pbmlmZXJhbCBhc3NlbWJsYWdlcy4gPGVtPk1hcmluZSBNaWNyb3BhbGVvbnRvbG9neTxcL2VtPjxcL3RkPjxcL3RyPjx0cj48dGQgY2xhc3M9XCJ0aXRsZVwiPlNpemU6PFwvdGQ+PHRkIGNsYXNzPVwiY29udGVudFwiPjMgZGF0YXNldHM8XC90ZD48XC90cj48XC90YWJsZT48ZGl2IGNsYXNzPVwiZGF0YXNldGlkXCI+PGEgaHJlZj1cImh0dHBzOlwvXC9kb2kucGFuZ2FlYS5kZVwvMTAuMTU5NFwvUEFOR0FFQS44MTExODlcIiB0YXJnZXQ9XCJfc2VsZlwiIGNsYXNzPVwiZGF0YXNldC1saW5rIGRvaS1saW5rXCI+aHR0cHM6XC9cL2RvaS5vcmdcLzEwLjE1OTRcL1BBTkdBRUEuODExMTg5PFwvYT4gLSA8c3BhbiB0aXRsZT1cIlRoZSBzY29yZSBpcyBhIG1lYXN1cmVtZW50IG9mIHJlbGV2YW5jeSAoc2VlIFRGLUlERiBhbGdvcml0aG0pLiBUaGUgdmFsdWUgaXMgbm90IGFic29sdXRlIGFuZCBvbmx5IHN1aXRhYmxlIHRvIGNvbXBhcmUgaGl0cyBmcm9tIHRoZSBzYW1lIHJlc3VsdCBzZXQuXCI+U2NvcmU6IDI5Ljc1PFwvc3Bhbj48XC9kaXY+PFwvbGk+In0seyJVUkkiOiJkb2k6MTAuMTU5NFwvUEFOR0FFQS44NjQxMDYiLCJzY29yZSI6MjkuMDQzODI3LCJodG1sIjoiPGxpPjxkaXYgY2xhc3M9XCJjaXRhdGlvblwiPjxhIGhyZWY9XCJodHRwczpcL1wvZG9pLnBhbmdhZWEuZGVcLzEwLjE1OTRcL1BBTkdBRUEuODY0MTA2XCIgdGFyZ2V0PVwiX3NlbGZcIiBjbGFzcz1cImRhdGFzZXQtbGlua1wiPjxzdHJvbmc+SmluLCBYOyBMaXUsIEM7IFBvdWx0b24sIEFKIGV0IGFsLiAoMjAxNik6PFwvc3Ryb25nPiBDb2Njb2xpdGhvcGhvcmUgYWJ1bmRhbmNlIGFuZCBiaW9tZXRyeSBpbiB0aGUgU291dGggQ2hpbmEgU2VhLCAyMDE0PFwvYT48XC9kaXY+PHRhYmxlIGNsYXNzPVwicmVzdWx0XCIgc3VtbWFyeT1cIkRhdGFzZXQgcmVmZXJlbmNlIGFuZCBzaXplXCIgY2VsbHNwYWNpbmc9XCIwXCIgY2VsbHBhZGRpbmc9XCIwXCI+PHRyPjx0ZCBjbGFzcz1cInRpdGxlXCI+U3VwcGxlbWVudCB0bzo8XC90ZD48dGQgY2xhc3M9XCJjb250ZW50XCI+PHN0cm9uZz5KaW4sIFg7IExpdSwgQzsgUG91bHRvbiwgQUogZXQgYWwuICgyMDE2KTo8XC9zdHJvbmc+IENvY2NvbGl0aG9waG9yZSByZXNwb25zZXMgdG8gZW52aXJvbm1lbnRhbCB2YXJpYWJpbGl0eSBpbiB0aGUgU291dGggQ2hpbmEgU2VhOiBzcGVjaWVzIGNvbXBvc2l0aW9uIGFuZCBjYWxjaXRlIGNvbnRlbnQuIDxlbT5CaW9nZW9zY2llbmNlczxcL2VtPjxcL3RkPjxcL3RyPjx0cj48dGQgY2xhc3M9XCJ0aXRsZVwiPlNpemU6PFwvdGQ+PHRkIGNsYXNzPVwiY29udGVudFwiPjQgZGF0YXNldHM8XC90ZD48XC90cj48XC90YWJsZT48ZGl2IGNsYXNzPVwiZGF0YXNldGlkXCI+PGEgaHJlZj1cImh0dHBzOlwvXC9kb2kucGFuZ2FlYS5kZVwvMTAuMTU5NFwvUEFOR0FFQS44NjQxMDZcIiB0YXJnZXQ9XCJfc2VsZlwiIGNsYXNzPVwiZGF0YXNldC1saW5rIGRvaS1saW5rXCI+aHR0cHM6XC9cL2RvaS5vcmdcLzEwLjE1OTRcL1BBTkdBRUEuODY0MTA2PFwvYT4gLSA8c3BhbiB0aXRsZT1cIlRoZSBzY29yZSBpcyBhIG1lYXN1cmVtZW50IG9mIHJlbGV2YW5jeSAoc2VlIFRGLUlERiBhbGdvcml0aG0pLiBUaGUgdmFsdWUgaXMgbm90IGFic29sdXRlIGFuZCBvbmx5IHN1aXRhYmxlIHRvIGNvbXBhcmUgaGl0cyBmcm9tIHRoZSBzYW1lIHJlc3VsdCBzZXQuXCI+U2NvcmU6IDI5LjA0PFwvc3Bhbj48XC9kaXY+PFwvbGk+In0seyJVUkkiOiJkb2k6MTAuMTU5NFwvUEFOR0FFQS44NDQ1MjciLCJzY29yZSI6MjguNjQyNDEsImh0bWwiOiI8bGk+PGRpdiBjbGFzcz1cImNpdGF0aW9uXCI+PGEgaHJlZj1cImh0dHBzOlwvXC9kb2kucGFuZ2FlYS5kZVwvMTAuMTU5NFwvUEFOR0FFQS44NDQ1MjdcIiB0YXJnZXQ9XCJfc2VsZlwiIGNsYXNzPVwiZGF0YXNldC1saW5rXCI+PHN0cm9uZz5Db3JzZWxsaSwgQzsgUHJpbmNpcGF0bywgTVM7IE1hZmZpb2xpLCBQIGV0IGFsLiAoMjAwMik6PFwvc3Ryb25nPiBQbGFua3RvbmljIGFzc2VtYmxhZ2VzIGR1cmluZyBzYXByb3BlbCBTNSBkZXBvc2l0cyBpbiB0aGUgVXJhbmlhIEJhc2luPFwvYT48XC9kaXY+PHRhYmxlIGNsYXNzPVwicmVzdWx0XCIgc3VtbWFyeT1cIkRhdGFzZXQgcmVmZXJlbmNlIGFuZCBzaXplXCIgY2VsbHNwYWNpbmc9XCIwXCIgY2VsbHBhZGRpbmc9XCIwXCI+PHRyPjx0ZCBjbGFzcz1cInRpdGxlXCI+U3VwcGxlbWVudCB0bzo8XC90ZD48dGQgY2xhc3M9XCJjb250ZW50XCI+PHN0cm9uZz5Db3JzZWxsaSwgQzsgUHJpbmNpcGF0bywgTVM7IE1hZmZpb2xpLCBQIGV0IGFsLiAoMjAwMik6PFwvc3Ryb25nPiBDaGFuZ2VzIGluIHBsYW5rdG9uaWMgYXNzZW1ibGFnZXMgZHVyaW5nIHNhcHJvcGVsIFM1IGRlcG9zaXRpb246IEV2aWRlbmNlIGZyb20gVXJhbmlhIEJhc2luIGFyZWEsIGVhc3Rlcm4gTWVkaXRlcnJhbmVhbi4gPGVtPlBhbGVvY2Vhbm9ncmFwaHk8XC9lbT48XC90ZD48XC90cj48dHI+PHRkIGNsYXNzPVwidGl0bGVcIj5TaXplOjxcL3RkPjx0ZCBjbGFzcz1cImNvbnRlbnRcIj43IGRhdGFzZXRzPFwvdGQ+PFwvdHI+PFwvdGFibGU+PGRpdiBjbGFzcz1cImRhdGFzZXRpZFwiPjxhIGhyZWY9XCJodHRwczpcL1wvZG9pLnBhbmdhZWEuZGVcLzEwLjE1OTRcL1BBTkdBRUEuODQ0NTI3XCIgdGFyZ2V0PVwiX3NlbGZcIiBjbGFzcz1cImRhdGFzZXQtbGluayBkb2ktbGlua1wiPmh0dHBzOlwvXC9kb2kub3JnXC8xMC4xNTk0XC9QQU5HQUVBLjg0NDUyNzxcL2E+IC0gPHNwYW4gdGl0bGU9XCJUaGUgc2NvcmUgaXMgYSBtZWFzdXJlbWVudCBvZiByZWxldmFuY3kgKHNlZSBURi1JREYgYWxnb3JpdGhtKS4gVGhlIHZhbHVlIGlzIG5vdCBhYnNvbHV0ZSBhbmQgb25seSBzdWl0YWJsZSB0byBjb21wYXJlIGhpdHMgZnJvbSB0aGUgc2FtZSByZXN1bHQgc2V0LlwiPlNjb3JlOiAyOC42NDxcL3NwYW4+PFwvZGl2PjxcL2xpPiJ9LHsiVVJJIjoiZG9pOjEwLjE1OTRcL1BBTkdBRUEuODA0NDY5Iiwic2NvcmUiOjI3LjQ3NDk2MiwiaHRtbCI6IjxsaT48ZGl2IGNsYXNzPVwiY2l0YXRpb25cIj48YSBocmVmPVwiaHR0cHM6XC9cL2RvaS5wYW5nYWVhLmRlXC8xMC4xNTk0XC9QQU5HQUVBLjgwNDQ2OVwiIHRhcmdldD1cIl9zZWxmXCIgY2xhc3M9XCJkYXRhc2V0LWxpbmtcIj48c3Ryb25nPk9rYWRhLCBIICgyMDAwKTo8XC9zdHJvbmc+IE5hbm5vZm9zc2lsIGRhdHVtcyBhbmQgYWJ1bmRhbmNlIGluIHNlZGltZW50cyBmcm9tIE9EUCBMZWcgMTY0IHNpdGVzPFwvYT48XC9kaXY+PHRhYmxlIGNsYXNzPVwicmVzdWx0XCIgc3VtbWFyeT1cIkRhdGFzZXQgcmVmZXJlbmNlIGFuZCBzaXplXCIgY2VsbHNwYWNpbmc9XCIwXCIgY2VsbHBhZGRpbmc9XCIwXCI+PHRyPjx0ZCBjbGFzcz1cInRpdGxlXCI+U3VwcGxlbWVudCB0bzo8XC90ZD48dGQgY2xhc3M9XCJjb250ZW50XCI+PHN0cm9uZz5Pa2FkYSwgSCAoMjAwMCk6PFwvc3Ryb25nPiBOZW9nZW5lIGFuZCBRdWF0ZXJuYXJ5IGNhbGNhcmVvdXMgbmFubm9mb3NzaWxzIGZyb20gdGhlIEJsYWtlIFJpZGdlLCBTaXRlcyA5OTQsIDk5NSwgYW5kIDk5Ny4gPGVtPkluOiBQYXVsbCwgQ0s7IE1hdHN1bW90bywgUjsgV2FsbGFjZSwgUEo7IERpbGxvbiwgV1AgKGVkcy4pIFByb2NlZWRpbmdzIG9mIHRoZSBPY2VhbiBEcmlsbGluZyBQcm9ncmFtLCBTY2llbnRpZmljIFJlc3VsdHMsIENvbGxlZ2UgU3RhdGlvbiwgVFggKE9jZWFuIERyaWxsaW5nIFByb2dyYW0pPFwvZW0+PFwvdGQ+PFwvdHI+PHRyPjx0ZCBjbGFzcz1cInRpdGxlXCI+U2l6ZTo8XC90ZD48dGQgY2xhc3M9XCJjb250ZW50XCI+MiBkYXRhc2V0czxcL3RkPjxcL3RyPjxcL3RhYmxlPjxkaXYgY2xhc3M9XCJkYXRhc2V0aWRcIj48YSBocmVmPVwiaHR0cHM6XC9cL2RvaS5wYW5nYWVhLmRlXC8xMC4xNTk0XC9QQU5HQUVBLjgwNDQ2OVwiIHRhcmdldD1cIl9zZWxmXCIgY2xhc3M9XCJkYXRhc2V0LWxpbmsgZG9pLWxpbmtcIj5odHRwczpcL1wvZG9pLm9yZ1wvMTAuMTU5NFwvUEFOR0FFQS44MDQ0Njk8XC9hPiAtIDxzcGFuIHRpdGxlPVwiVGhlIHNjb3JlIGlzIGEgbWVhc3VyZW1lbnQgb2YgcmVsZXZhbmN5IChzZWUgVEYtSURGIGFsZ29yaXRobSkuIFRoZSB2YWx1ZSBpcyBub3QgYWJzb2x1dGUgYW5kIG9ubHkgc3VpdGFibGUgdG8gY29tcGFyZSBoaXRzIGZyb20gdGhlIHNhbWUgcmVzdWx0IHNldC5cIj5TY29yZTogMjcuNDc8XC9zcGFuPjxcL2Rpdj48XC9saT4ifSx7IlVSSSI6ImRvaToxMC4xNTk0XC9QQU5HQUVBLjg5MDcxMCIsInNjb3JlIjoyNy4yODU4NzMsImh0bWwiOiI8bGk+PGRpdiBjbGFzcz1cImNpdGF0aW9uXCI+PGEgaHJlZj1cImh0dHBzOlwvXC9kb2kucGFuZ2FlYS5kZVwvMTAuMTU5NFwvUEFOR0FFQS44OTA3MTBcIiB0YXJnZXQ9XCJfc2VsZlwiIGNsYXNzPVwiZGF0YXNldC1saW5rXCI+PHN0cm9uZz5UYW5ndW5hbiwgRE4gKDIwMTgpOjxcL3N0cm9uZz4gTmFubm9mb3NzaWwgYWJ1bmRhbmNlIGZyb20gSU9EUCBzaXRlIDM2MS1VMTQ3NiAoMi44NS0xLjg1IE1hKTxcL2E+PFwvZGl2Pjx0YWJsZSBjbGFzcz1cInJlc3VsdFwiIHN1bW1hcnk9XCJEYXRhc2V0IHJlZmVyZW5jZSBhbmQgc2l6ZVwiIGNlbGxzcGFjaW5nPVwiMFwiIGNlbGxwYWRkaW5nPVwiMFwiPjx0cj48dGQgY2xhc3M9XCJ0aXRsZVwiPlN1cHBsZW1lbnQgdG86PFwvdGQ+PHRkIGNsYXNzPVwiY29udGVudFwiPjxzdHJvbmc+VGFuZ3VuYW4sIEROOyBCYXVtYW5uLCBLLUg7IEp1c3QsIEogZXQgYWwuICgyMDE4KTo8XC9zdHJvbmc+IFRoZSBsYXN0IDEgbWlsbGlvbiB5ZWFycyBvZiB0aGUgZXh0aW5jdCBnZW51cyBEaXNjb2FzdGVyOiBQbGlvLVBsZWlzdG9jZW5lIGVudmlyb25tZW50IGFuZCBwcm9kdWN0aXZpdHkgYXQgU2l0ZSBVMTQ3NiAoTW96YW1iaXF1ZSBDaGFubmVsKS4gPGVtPlBhbGFlb2dlb2dyYXBoeSwgUGFsYWVvY2xpbWF0b2xvZ3ksIFBhbGFlb2Vjb2xvZ3k8XC9lbT48XC90ZD48XC90cj48dHI+PHRkIGNsYXNzPVwidGl0bGVcIj5TaXplOjxcL3RkPjx0ZCBjbGFzcz1cImNvbnRlbnRcIj4yIGRhdGFzZXRzPFwvdGQ+PFwvdHI+PFwvdGFibGU+PGRpdiBjbGFzcz1cImRhdGFzZXRpZFwiPjxhIGhyZWY9XCJodHRwczpcL1wvZG9pLnBhbmdhZWEuZGVcLzEwLjE1OTRcL1BBTkdBRUEuODkwNzEwXCIgdGFyZ2V0PVwiX3NlbGZcIiBjbGFzcz1cImRhdGFzZXQtbGluayBkb2ktbGlua1wiPmh0dHBzOlwvXC9kb2kub3JnXC8xMC4xNTk0XC9QQU5HQUVBLjg5MDcxMDxcL2E+IC0gPHNwYW4gdGl0bGU9XCJUaGUgc2NvcmUgaXMgYSBtZWFzdXJlbWVudCBvZiByZWxldmFuY3kgKHNlZSBURi1JREYgYWxnb3JpdGhtKS4gVGhlIHZhbHVlIGlzIG5vdCBhYnNvbHV0ZSBhbmQgb25seSBzdWl0YWJsZSB0byBjb21wYXJlIGhpdHMgZnJvbSB0aGUgc2FtZSByZXN1bHQgc2V0LlwiPlNjb3JlOiAyNy4yOTxcL3NwYW4+PFwvZGl2PjxcL2xpPiJ9XSwiZmFjZXRzIjpudWxsLCJtYXhTY29yZSI6NTUuNTM1NDEsIm9mZnNldCI6MCwicXVlcnlJZGVudGlmaWVyIjoiMzIwNTdkN2QtNTE1Ny0zYWJiLTg1YjgtMWZmOTc5MzQ4NmM2Iiwic2Vzc2lvbiI6ImZ1M2YwaXFwbGF1Z29sYWNybDYwOWVnNHA3IiwidGltZUluRGF0YWJhc2UiOjYsInRvdGFsQ291bnQiOjEyODQsImh0bWxTdW1tYXJ5IjoiPHN0cm9uZz4xMjg0IGRhdGFzZXRzPFwvc3Ryb25nPiBmb3VuZCBvbiBzZWFyY2ggZm9yIDxzdHJvbmcgdGl0bGU9XCJRdWVyeTogJnJhcXVvO2Zsb3Jpc3BoYWVyYSZsYXF1bztcIj4mcmFxdW87ZmxvcmlzcGhhZXJhJmxhcXVvOzxcL3N0cm9uZz4iLCJodG1sU25pcHBldFJTUyI6IjxsaW5rIHJlbD1cImFsdGVybmF0ZVwiIHRpdGxlPVwiUEFOR0FFQSBsYXRlc3QgZGF0YXNldHMgYWJvdXQgJnF1b3Q7ZmxvcmlzcGhhZXJhJnF1b3Q7XCIgdHlwZT1cImFwcGxpY2F0aW9uXC9yc3MreG1sXCIgaHJlZj1cIlwvdG9vbHNcL2xhdGVzdC1kYXRhc2V0cy5yc3M/cT1mbG9yaXNwaGFlcmEmYW1wO2NvdW50PTEwXCI+In0=
  recorded_at: 2020-01-22 17:18:01 GMT
  recorded_with: vcr/0.4.0, webmockr/0.5.0
- request:
    method: get
    uri: https://www.pangaea.de/advanced/search.php?count=10&offset=10&q=florisphaera
    body:
      encoding: ''
      string: ''
    headers:
      User-Agent: libcurl/7.54.0 r-curl/4.3 crul/0.9.0
      Accept-Encoding: gzip, deflate
      Accept: application/json, text/xml, application/xml, */*
  response:
    status:
      status_code: '200'
      message: OK
      explanation: Request fulfilled, document follows
    headers:
      cache-control: private, max-age=10800, pre-check=10800
      connection: keep-alive
      content-encoding: gzip
      content-type: application/json; charset=UTF-8
      date: Wed, 22 Jan 2020 17:18:00 GMT
      last-modified: Fri, 15 Apr 2016 11:55:50 GMT
      server: PANGAEA/2.0
      status: HTTP/1.1 200 OK
      strict-transport-security: max-age=31536000
      transfer-encoding: chunked
      vary:
      - Accept-Encoding
      - Cookie, X-PanLoginID, Authorization
      x-content-type-options: nosniff
      x-frame-options: SAMEORIGIN
      x-ua-compatible: IE=Edge
    body:
      encoding: ASCII-8BIT
      file: no
      string: 
  recorded_at: 2020-01-22 17:18:01 GMT
  recorded_with: vcr/0.4.0, webmockr/0.5.0
- request:
    method: get
    uri: https://www.pangaea.de/advanced/search.php?count=10&offset=20&q=florisphaera
    body:
      encoding: ''
      string: ''
    headers:
      User-Agent: libcurl/7.54.0 r-curl/4.3 crul/0.9.0
      Accept-Encoding: gzip, deflate
      Accept: application/json, text/xml, application/xml, */*
  response:
    status:
      status_code: '200'
      message: OK
      explanation: Request fulfilled, document follows
    headers:
      cache-control: private, max-age=10800, pre-check=10800
      connection: keep-alive
      content-encoding: gzip
      content-type: application/json; charset=UTF-8
      date: Wed, 22 Jan 2020 17:18:01 GMT
      last-modified: Fri, 15 Apr 2016 11:55:50 GMT
      server: PANGAEA/2.0
      status: HTTP/1.1 200 OK
      strict-transport-security: max-age=31536000
      transfer-encoding: chunked
      vary:
      - Accept-Encoding
      - Cookie, X-PanLoginID, Authorization
      x-content-type-options: nosniff
      x-frame-options: SAMEORIGIN
      x-ua-compatible: IE=Edge
    body:
      encoding: ASCII-8BIT
      file: no
      string: 
  recorded_at: 2020-01-22 17:18:01 GMT
  recorded_with: vcr/0.4.0, webmockr/0.5.0
